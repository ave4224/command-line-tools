#!/bin/bash

#Layout credit to github.com/stephen304/dotfiles
subcommand=$1

function gitt_help(){
  echo "Usage: gitt <subcommand> [arguments]\n"
  echo "Subcommands:"
  echo "    shove [commit message] "
  echo "    - Adds all changes, commits, pulls, and pushes"
  echo "    update <directory> "
  echo "    - updates a directory's repository"
  echo ""
}

function gitt_update_help(){
  echo "USAGE: update <directory> "
  echo "    - updates a directory's repository"
  echo ""
}

function gitt_update(){
  if [$# -eq 1]
  then
    olddir=`pwd`
    cd $1
    git pull
    cd $olddir
    exit 0
  else
    echo "ERROR: Bad arguments"
    gitt_update_help
    exit 1
  fi
}

function gitt_shove_help(){
  echo "USAGE: gitt shove [commit message]"
  echo "- Adds all changes, commits, pulls, and pushes"
  echo "- if no commit message is supplied 'updated' will be used"
  echo ""
}

function gitt_shove(){
  MESSAGE=$1
  if [ $# -lt 1 ]; then
    MESSAGE="updated"
  fi
  if [ $# -gt 1 ]; then
    echo "ERROR: Too many arguments"
    gitt_shove_help
    exit 1
  fi
  git pull
  find . -name .DS_Store -print0 | xargs -0 rm -f --
  git add --all .
  git commit -m "$MESSAGE"
  git push
  echo "------------"
  echo "Commit ID: "
  git rev-parse HEAD
  echo "-------------"
  time=$(date +"%r")
  echo "Current time: $time"
  git add .
  git commit
}
case $2 in
  "-h" | "--help")
  subcommand="${subcommand}_help"
  ;;
esac
case $subcommand in
  "" | "-h" | "--help")
  gitt_help
  ;;
  *)
  shift
  gitt_${subcommand} $@
  if [ $? = 127 ]; then
    echo "Error: '$subcommand' is not a known subcommand." >&2
    echo "       Run '$progname --help' for a list of known subcommands." >&2
    exit 1
  fi
  ;;
esac
